// Active: 1749751740042@@127.0.0.1@27017@practice
//$match stage in aggregation allows to choose those document from a collection that we want to work with it.

db("practice").collection("user").find();

db("practice")
  .collection("user")
  .aggregate([
    //stage-1
    { $match: { age: { $lt: 30 }, gender: "Male" } },
    //stage-2
    { $project: { name: 1, age: 1, gender: 1, _id: 0 } },
  ]);
db("practice")
  .collection("user")
  .aggregate([
    //stage-1
    { $match: { age: { $lt: 30 }, gender: "Male" } },
    //stage-2
    { $addFields: { course: "Level-2", eduTech: "TajDEV." } },
    //stage-3
    { $project: { name: 1, age: 1, gender: 1, course: 1 } },
    //for new collection
    { $out: "Tajdev" },
  ]);
db("practice")
  .collection("user")
  .aggregate([
    //stage-1
    { $match: { age: { $lt: 30 }, gender: "Male" } },
    //stage-2
    { $addFields: { course: "Level-2", eduTech: "TajDEV." } },
    //stage-3
    { $project: { name: 1, age: 1, gender: 1, course: 1 } },
    //for update existiing collection
    { $merge: "user" },
  ]);

db("practice")
  .collection("user")
  .aggregate([{ $group: { _id: "$gender", count: { $sum: 1 } } }]);

db("practice")
  .collection("user")
  .aggregate([
    {
      $group: {
        _id: "$address.country",
        count: { $sum: 1 },
        showName: { $push: "$name" },
      },
    },
  ]);
db("practice")
  .collection("user")
  .aggregate([
    //stage-1
    {
      $group: {
        _id: "$address.country",
        count: { $sum: 1 },
        showName: { $push: "$$ROOT" },
      },
    },
  ]);
db("practice")
  .collection("user")
  .aggregate([
    //stage-1
    {
      $group: {
        _id: "$address.country",
        count: { $sum: 1 },
        fullDoc: { $push: "$$ROOT" },
      },
    },
    {
      $project: {
        "fullDoc.name": 1,
        "fullDoc.age": 1,
      },
    },
  ]);

db("practice")
  .collection("user")
  .aggregate([
    {
      $group: {
        _id: "$address.country",
        totalJob: { $sum: 1 },
        totalSalary: { $sum: "$salary" },
        maxSalary: { $max: "$salary" },
        minSalary: { $min: "$salary" },
        avgSalary: { $avg: "$salary" },
      },
    },
    //stage-2
    {
      $project: {
        totalJob: 1,
        totalSalary: 1,
        maxSalary: 1,
        minSalary: 1,
        averageSalary: "avgSalary",
        rangeBetweenMaxAndMin: { $subtract: ["$maxSalary", "$minSalary"] },
      },
    },
  ]);

db("practice")
  .collection("user")
  .aggregate([
    { $unwind: "$friends" },
    { $group: { _id: "$friends", count: { $sum: 1 } } },
  ]);

db("practice")
  .collection("user")
  .aggregate([
    { $unwind: "$interests" },
    { $group: { _id: "$age", interestPerAge: { $push: "$interests" } } },
  ]);

db("practice")
  .collection("user")
  .aggregate([
    {
      $bucket: {
        groupBy: "$age",
        boundaries: [20, 40, 60, 80],
        default: "More Senior",
        output: {
          count: { $sum: 1 },
          averageSalary: { $avg: "$salary" },
          nameOfAges: { $push: "$$ROOT" },
        },
      },
    },
    { $sort: { count: -1 } },
    { $project: { count: 1 } },
    { $limit: 2 },
  ]);

db("practice")
  .collection("user")
  .aggregate([
    {
      $facet: {
        //pipeline-1
        friendsCount: [
          { $unwind: "$friends" },
          { $group: { _id: "$friends", count: { $sum: 1 } } },
        ],
        //pipeline-2
        interestPerAge: [
          { $unwind: "$interests" },
          {
            $group: {
              _id: "$age",
              interestPerAge: { $push: "$interests" },
              count: { $sum: 1 },
            },
          },
        ],
      },
    },
  ]);

db("practice")
  .collection("orders")
  .aggregate([
    {
      $lookup: {
        from: "user",
        localField: "userId",
        foreignField: "_id",
        as: "user",
      },
    },
  ]);

db("practice")
  .collection("user")
  .find({ email: "mdangl1@odnoklassniki.ru" })
  .explain("executionStats");

db("practice").collection("user").createIndex({
  firstName: "text",
  lastName: "text",
  bio: "text",
});

//index searching
db("practice")
  .collection("user")
  .find({ $text: { $search: "am" } });
